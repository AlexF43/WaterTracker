@page "/auth-test"
@using WaterTracker.Services
@inject AuthenticationService AuthService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Authentication Test</PageTitle>

<div class="container mt-5">
    <div class="row">
        <div class="col">
            <h2>Authentication Status</h2>
            @if (isLoading)
            {
                <p>Loading...</p>
            }
            else if (isAuthenticated)
            {
                <div class="alert alert-success">
                    You are authenticated!
                </div>
                @if (!string.IsNullOrEmpty(helloMessage))
                {
                    <div class="alert alert-info mt-3">
                        @helloMessage
                    </div>
                }
                <div class="mt-3">
                    <button class="btn btn-primary me-2" @onclick="CallHelloEndpoint">Call Hello Endpoint</button>
                    <button class="btn btn-danger" @onclick="Logout">Logout</button>
                </div>
            }
            else
            {
                <div class="alert alert-warning">
                    You are not authenticated.
                </div>
                <button class="btn btn-primary" @onclick="GoToLogin">Go to Login</button>
            }
        </div>
    </div>
</div>

@code {
    private bool isAuthenticated;
    private bool isLoading = true;
    private string helloMessage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (isAuthenticated)
            {
                await CallHelloEndpoint();
            }
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CallHelloEndpoint()
    {
        try
        {
            var response = await AuthService.GetHelloMessageAsync();
            if (response != null)
            {
                helloMessage = response;
            }
            else
            {
                helloMessage = "Failed to get hello message";
            }
        }
        catch (Exception ex)
        {
            helloMessage = $"Error: {ex.Message}";
        }
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        helloMessage = "";
        NavigationManager.NavigateTo("/login");
    }

    private void GoToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
}