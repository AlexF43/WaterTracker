@page "/home"
@using System.Runtime.InteropServices.JavaScript
@using WaterTracker.Model
@using WaterTracker.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject WaterTrackingService Tracker;
@rendermode InteractiveServer

<PageTitle>WaterTracker</PageTitle>

<div class="container" id="homeScreen">
    <div class="column">
        <div class="row h-25 align-middle">
            <h1>WaterTracker</h1>
        </div>
        <div class="row h-50 align-middle" >
            <div class="infoGraphic">
                <div class="info">
                    @if (_usages != null && _usages.Any())
                    {
                        <p>@liter L</p>
                    }
                    else
                    {
                        <p>Loading...</p>
                    }
                </div>
            </div>
        </div>
        <div class="row h-25 align-middle">
            <a class="btn btn-primary" href="/addUsage">Get Started</a>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(_message))
{
    <div class="@_alertClass p-4 rounded mb-4">
        @_message
    </div>
}


@code {
    private string _message = string.Empty;
    private string _alertClass = string.Empty;
    private bool _isLoading = false;
    private List<WaterUsage> _usages;

    private double liter;

    protected override void OnInitialized()
    {
        // Set the base address of the HttpClient
        Http.BaseAddress = new Uri(NavigationManager.BaseUri);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GetAllUsageSum(DateTime.Now);
        }
        StateHasChanged();
    }


    private async Task GetAllUsageSum(DateTime today)
    {
        double result = 0;
        var list = await Tracker.GetWaterUsage(today, today);
        _usages = list;
        SetLiterValue();
    }

    private void SetLiterValue()
    {
        double result = 0;
        foreach (var usage in _usages)
        {
            result += usage.totalUsage;
        }
        liter = result;
    }
    private async Task TestHelloEndpoint()
    {
        try
        {
            _isLoading = true;
            _message = string.Empty;

            Console.WriteLine($"Making request to: {Http.BaseAddress}api/User/hello");
            var response = await Http.GetAsync("api/User/hello");

            if (response.IsSuccessStatusCode)
            {
                _message = await response.Content.ReadAsStringAsync();
                _alertClass = "alert alert-success";
                Console.WriteLine($"Success! Message: {_message}");
            }
            else
            {
                _message = $"Failed to get response from hello endpoint. Status: {response.StatusCode}";
                _alertClass = "alert alert-danger";
                Console.WriteLine($"Failed! Status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            _message = $"An error occurred while testing the hello endpoint: {ex.Message}";
            _alertClass = "alert alert-danger";
            Console.WriteLine($"Exception: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

}