@page "/home"
@using System.Runtime.InteropServices.JavaScript
@using WaterTracker.Model
@using WaterTracker.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject WaterTrackingService Tracker;
@rendermode InteractiveServer

<PageTitle>WaterTracker</PageTitle>

<div class="container" id="homeScreen">
    <div class="column">
        <div class="row h-25 align-middle">
            <h1>WaterTracker</h1>
        </div>
        <div class="row h-50 align-middle" >
            <div class="infoGraphic">
                <div class="info">
                    @if (_usages != null && _usages.Any())
                    {
                        <p>In total WaterTracker has tracked @liter Liter's Today.</p>
                    }
                    else
                    {
                        <p>Loading...</p>
                    }
                </div>
            </div>
        </div>
        <div class="row h-25 align-middle d-flex flex-column gap-4">
            @if (lifetimeUsage > 0)
            {
                <div class="lifetime-fact text-center p-4 rounded-lg bg-blue-100">
                    <p class="text-lg text-blue-700">You've personally used <span class="font-bold">@lifetimeUsage.ToString("N1")L</span> of water!</p>
                    <p class="text-sm text-blue-600 mt-2">That's equivalent to:</p>
                    <div class="fact-equivalents mt-2">
                        <p class="text-blue-700">🚿 @((lifetimeUsage / 60).ToString("N0")) average showers</p>
                        <p class="text-blue-700">🛁 @((lifetimeUsage / 150).ToString("N0")) full bathtubs</p>
                        <p class="text-blue-700">🌊 @((lifetimeUsage / 1000).ToString("N1")) cubic meters of water</p>
                    </div>
                </div>
            }
            <a class="btn btn-primary" href="/addUsage">Get tracking</a>
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(_message))
{
    <div class="@_alertClass p-4 rounded mb-4">
        @_message
    </div>
}

<style>
    .lifetime-fact {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
    }

    .lifetime-fact:hover {
        transform: translateY(-2px);
    }

    .fact-equivalents {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-top: 1rem;
    }

    .fact-equivalents p {
        margin: 0;
        padding: 0.5rem;
        border-radius: 0.375rem;
        background-color: rgba(255, 255, 255, 0.5);
    }
</style>

@code {
    private string _message = string.Empty;
    private string _alertClass = string.Empty;
    private bool _isLoading = false;
    private List<WaterUsage> _usages;
    private double lifetimeUsage;
    private double liter;

    protected override void OnInitialized()
    {
        Http.BaseAddress = new Uri(NavigationManager.BaseUri);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetAllUsageSum(DateTime.Now);
            await GetLifetimeUsage();
        }
        StateHasChanged();
    }

    private async Task GetLifetimeUsage()
    {
        lifetimeUsage = await Tracker.GetLifetimeWaterUsageAsync();
    }

    private async Task GetAllUsageSum(DateTime today)
    {
        var list = await Tracker.GetWaterUsageAll(today);
        _usages = list;
        SetLiterValue();
    }

    private void SetLiterValue()
    {
        double result = 0;
        if (_usages != null)
        {
            foreach (var usage in _usages)
            {
                result += usage.totalUsage;
            }
        }
        liter = result;
    }

    private async Task TestHelloEndpoint()
    {
        try
        {
            _isLoading = true;
            _message = string.Empty;

            Console.WriteLine($"Making request to: {Http.BaseAddress}api/User/hello");
            var response = await Http.GetAsync("api/User/hello");

            if (response.IsSuccessStatusCode)
            {
                _message = await response.Content.ReadAsStringAsync();
                _alertClass = "alert alert-success";
                Console.WriteLine($"Success! Message: {_message}");
            }
            else
            {
                _message = $"Failed to get response from hello endpoint. Status: {response.StatusCode}";
                _alertClass = "alert alert-danger";
                Console.WriteLine($"Failed! Status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            _message = $"An error occurred while testing the hello endpoint: {ex.Message}";
            _alertClass = "alert alert-danger";
            Console.WriteLine($"Exception: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}