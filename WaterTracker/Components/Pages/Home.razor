@page "/"
@using System.Net.Http.Json
@using System.Net.Mime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

@if (!string.IsNullOrEmpty(_message))
{
    <div class="@_alertClass p-4 rounded mb-4">
        @_message
    </div>
}

<button class="btn btn-primary" @onclick="TestHelloEndpoint">Click me</button>

@code {
    private string _message = string.Empty;
    private string _alertClass = string.Empty;
    private bool _isLoading = false;

    protected override void OnInitialized()
    {
        // Set the base address of the HttpClient
        Http.BaseAddress = new Uri(NavigationManager.BaseUri);
    }

    private async Task TestHelloEndpoint()
    {
        try
        {
            _isLoading = true;
            _message = string.Empty;

            Console.WriteLine($"Making request to: {Http.BaseAddress}api/User/hello");
            var response = await Http.GetAsync("api/User/hello");

            if (response.IsSuccessStatusCode)
            {
                _message = await response.Content.ReadAsStringAsync();
                _alertClass = "alert alert-success";
                Console.WriteLine($"Success! Message: {_message}");
            }
            else
            {
                _message = $"Failed to get response from hello endpoint. Status: {response.StatusCode}";
                _alertClass = "alert alert-danger";
                Console.WriteLine($"Failed! Status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            _message = $"An error occurred while testing the hello endpoint: {ex.Message}";
            _alertClass = "alert alert-danger";
            Console.WriteLine($"Exception: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

}