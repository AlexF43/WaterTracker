@page "/addUsage"
@using ApexCharts
@using WaterTracker.Model
@using WaterTracker.Services
@inject HttpClient Http
@inject WaterTrackingService TrackService
@inject NavigationManager NavigationManager
@inject IJSRuntime Javascript
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Record Water Usage</PageTitle>

<div class="container">
    <div class="row h-25">
        <h1>Record Water Usage</h1>
        <p>This component demonstrates showing data.</p>
    </div>
    <div class="row h-50">
        <form method="post" @onsubmit="Onsubmit">
            <div class="form-group">
                <label for="Time">Time</label>
                <input type="datetime-local" 
                       class="form-control" 
                       id="Time" 
                       value="@date.ToString("yyyy-MM-ddTHH:mm")"
                       @onchange="@((ChangeEventArgs e) => OnDateChange(e))">
            </div>
            <div class="form-group">
                <label for="waterUsageName">Comment</label>
                <input class="form-control" 
                       id="waterUsageName" 
                       placeholder="Title(Reason) of water usage" 
                       @bind="usageName">
            </div>
            <div class="form-group">
                <label for="waterUsageName">Category</label>
                <select class="form-select" 
                        aria-label="Usage Example" 
                        name="Selection" 
                        @onchange="LoadValue">
                    @if (_amounts != null && _amounts.Any())
                    {
                        @for (int i = 0; i < _amounts.Count; i++)
                        {
                            <option value="@i">@_amounts[i].usageType</option>
                        }
                    }
                    else
                    {
                        <option disabled>Loading...</option>
                    }
                </select>
            </div>
            @if(!fixedTime) {
                <div class="form-group">
                    <label for="usedTime">Used Time (Seconds)</label>
                    <input class="form-control" 
                           id="usedTime" 
                           placeholder="Used Seconds" 
                           disabled="@fixedTime" 
                           @bind="fixedValue">
                </div>
            }
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </form>
    </div>
</div>

@code {
    enum GraphStatus
    {
        Proportion,
        AllUsage
    }

    private DateTime date = DateTime.Now;
    private bool fixedTime;
    private int fixedValue;
    private int selectedValue;
    private string usageName;
    List<WaterAmount> _amounts = new List<WaterAmount>();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await TrackService.GetAmountListAsync();
            if (result != null)
            {
                _amounts = result;
            }
            StateHasChanged();
        }
    }

    private void OnDateChange(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out DateTime newDate))
        {
            date = newDate;
        }
    }

    void LoadValue(ChangeEventArgs e)
    {
        int index = Convert.ToInt32(e.Value);
        selectedValue = index;
        switch (index)
        {
            case 1:
                fixedValue = 1;
                fixedTime = true;
                break; 
            case 4:
                fixedValue = 1;
                fixedTime = true;
                break; 
            case 5:
                fixedValue = 1;
                fixedTime = true;
                break; 
            case 6:
                fixedValue = 1;
                fixedTime = true;
                break; 
            default:
                fixedValue = 0;
                fixedTime = false;
                break;
        }
    }

    private async void Onsubmit()
    {
        if (await TrackService.AddUsageAsync(date, usageName, _amounts[selectedValue].usageType, fixedValue))
        {
            await Javascript.InvokeVoidAsync("alert", "Successfully Added");
            NavigationManager.NavigateTo("/daily");
        }
        else
        {
            await Javascript.InvokeVoidAsync("alert", "Error");
        }
    }
}