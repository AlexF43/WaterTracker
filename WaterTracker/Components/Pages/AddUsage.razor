@page "/addUsage"
@using ApexCharts
@using WaterTracker.Model
@using WaterTracker.Services
@inject HttpClient Http
@inject WaterTrackingService TrackService
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Record Water Usage</PageTitle>



<div class="container">
    <div class="row h-25">
        <h1>Record Water Usage</h1>
        <p>This component demonstrates showing data.</p>
    </div>
    <div class="row h-50">
        <form action="">
            <div class="form-group">
                <label for="Time">Time</label>
                <input type="email" class="form-control" id="Time" aria-describedby="emailHelp" placeholder="hh:mm" value="@now">
            </div>
            <div class="form-group">
                <label for="waterUsageName">Usage</label>
                <input class="form-control" id="waterUsageName" placeholder="Title(Reason) of water usage">
            </div>
            <div class="form-group">
                <label for="waterUsageName">Usage Category</label>
                <select class="form-select" aria-label="Usage Example" name="Selection" @onchange="LoadValue">
                    @if (_amounts != null && _amounts.Any())
                    {
                        @for (int i = 0; i < _amounts.Count; i++)
                        {
                            <option value="@i">@_amounts[i].usageType</option>
                        }
                    }
                    else
                    {
                        <option disabled>Loading...</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="usedTime">Used Time</label>
                <input class="form-control" id="usedTime" placeholder="Used Seconds" disabled="@fixedTime" value="@fixedValue">
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary" @onsubmit="Onsubmit">Submit</button>
            </div>
        </form>
    </div>
</div>

@code {

    enum GraphStatus
    {
        Proportion,
        AllUsage
    }

    private string now;
    private bool fixedTime;
    private double fixedValue;
    List<WaterAmount> _amounts = new List<WaterAmount>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await TrackService.GetAmountListAsync();
            if (result != null)
            {
                _amounts = result;
                now = DateTime.Now.ToString("HH:mm");
            }
            StateHasChanged();
        }
    }

    void LoadValue(ChangeEventArgs e)
    {
        int index = Convert.ToInt32(e.Value);

        switch (index)
        {
            case 1:
                fixedValue = 1;
                fixedTime = true;
                break; 
            case 4:
                fixedValue = 1;
                fixedTime = true;
                break; 
            case 5:
                fixedValue = 1;
                fixedTime = true;
                break; 
            case 6:
                fixedValue = 1;
                fixedTime = true;
                break; 
            default:
                fixedValue = 0;
                fixedTime = false;
                break;
        }
    }

    private async void Onsubmit()
    {
        
    }
    
    
}