@page "/weekly"
@using WaterTracker.Model
@using WaterTracker.Services
@using ApexCharts
@inject WaterTrackingService Tracker
@inject HttpClient Http
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Weekly View</PageTitle>

<div class="container">
    <div class="row h-25">
        <h1>Your Weekly Record</h1>
        <p>This component demonstrates showing data.</p>
    </div>
    <div class="row h-50">
        @if (_weeklyUsages.Count == 0)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <div class="PieChart">
                <ApexChart TItem="KeyValue" Title="WeeklyUsage" Width="800" Height="600">
                    <ApexPointSeries TItem="KeyValue"
                                     Items="_chartData"
                                     Name="Test"
                                     SeriesType="SeriesType.Bar"
                                     XValue="e => e.time"
                                     YValue="e=> (decimal)e.value"
                                     ShowDataLabels="true"/>
                </ApexChart>
            </div>
        }
    </div>
    <div class="row h-25">
        <div class="column-sm w-50">
            <a class="btn btn-info" href="/addUsage"><b>+</b>Record your usage</a>
        </div>
        <div class="column-sm w-50">
            <div id="infoGraphic">
                <WaterUseageGoalDroplet Size="120" IsWeekly="true" />
            </div>
        </div>

    </div>
</div>

@code {

    class KeyValue
    {
        public string time;
        public double value;
    }
    private Dictionary<string, double> _weeklyUsages = new Dictionary<string, double>();
    List<KeyValue> _chartData = new List<KeyValue>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetWaterUsages(DateTime.Now);
        }
        StateHasChanged();
    }

    private async Task GetWaterUsages(DateTime today)
    {
        Console.Write("Request water usages");
        _weeklyUsages = await Tracker.GetWeeklyWaterUsage(today.Date - TimeSpan.FromDays(7), today);
        foreach (var usage in _weeklyUsages)
        {
            _chartData.Add(new KeyValue{time = usage.Key, value = usage.Value});
        }
    }
}